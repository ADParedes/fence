#!/usr/bin/env python

import argparse
import os
import sys

from fence.scripting.fence_create import (
    create_client_action,
    create_sample_data,
    delete_client_action,
    delete_users,
    google_init,
    sync_users,
    remove_expired_google_service_account_keys,
    create_user_token,
    remove_expired_google_accounts_from_proxy_groups
)
from userdatamodel.driver import SQLAlchemyDriver
from userdatamodel.models import (
    AccessPrivilege,
    CloudProvider,
    IdentityProvider,
    Project,
    Group,
    StorageAccess,
    User,
    Bucket,
)

def str2bool(v):
    if v.lower() == 'true':
        return True
    elif v.lower() == 'false':
        return False
    else:
        raise argparse.ArgumentTypeError('Boolean value expected.')

def parse_arguments():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '--path',
        default='/var/www/fence/',
        help='path to find local_settings.py',
    )

    subparsers = parser.add_subparsers(title='action', dest='action')

    create = subparsers.add_parser('create')
    create.add_argument('yaml-input')

    client_create = subparsers.add_parser('client-create')
    client_create.add_argument('--client', required=True)
    client_create.add_argument('--urls', required=True)
    client_create.add_argument(
        '--username',
        help='user(can represent an organization) that owns the client',
        required=True)
    client_create.add_argument(
        '--external',
        help='is this an external oidc client',
        action="store_true", default=False
    )

    client_delete = subparsers.add_parser('client-delete')
    client_delete.add_argument('--client', required=True)

    user_delete = subparsers.add_parser('user-delete')
    user_delete.add_argument('--users', required=True, nargs='+')

<<<<<<< HEAD
    hmac_create = subparsers.add_parser('hmac-create')
    hmac_create.add_argument('yaml-input')
=======
def create_group(s, data):
        for group_name, fields in data['groups'].iteritems():
            projects = fields.get('projects', [])
            group = s.query(Group).filter(Group.name == group_name).first()
            if not group:
                group = Group(name=group_name)
            for project_data in projects:
                grant_project_to_group_or_user(s, project_data, group)
>>>>>>> 1f49f1b... feat(migration): add create and delete group

    dbgap_sync = subparsers.add_parser('sync')
    dbgap_sync.add_argument(
        '--projects',
        dest='project_mapping',
        help='Specify project mapping yaml file')
    dbgap_sync.add_argument(
        '--yaml',
        help='Sync from yaml file')
    dbgap_sync.add_argument(
        '--csv_dir',
        help='specify csv file directory')
    dbgap_sync.add_argument(
        '--sync_from_dbgap',
        help='sync from dbgap server True/False',
        default='False')

    manage_google_keys = subparsers.add_parser('google-manage-keys')
    init_google = subparsers.add_parser('google-init')
    manage_google_accounts = (
        subparsers.add_parser('google-manage-account-access')
    )

    token_create = subparsers.add_parser('token-create')
    token_create.add_argument('--kid')
    token_create.add_argument('--type', required=True)
    token_create.add_argument('--username', required=True)
    token_create.add_argument('--scopes', required=True)
    token_create.add_argument('--exp')

    return parser.parse_args()


def main():
    args = parse_arguments()

    # get database information
    sys.path.append(args.path)

    if os.environ.get('FENCE_DB'):
        DB = os.environ['FENCE_DB']
    else:
        from fence.settings import DB

    if os.environ.get('BASE_URL'):
        DB = os.environ['BASE_URL']
    else:
        from fence.settings import BASE_URL

    if os.environ.get('ROOT_DIR'):
        ROOT_DIR = os.environ['ROOT_DIR']
    else:
        ROOT_DIR = '/fence'

    if os.environ.get('dbGaP'):
        dbGaP = os.environ['dbGaP']
    else:
        from fence.settings import dbGaP

    if os.environ.get('STORAGE_CREDENTIALS'):
        STORAGE_CREDENTIALS = os.environ['STORAGE_CREDENTIALS']
    else:
        from fence.settings import STORAGE_CREDENTIALS

    if args.action == 'create':
        yaml_input = args.__dict__['yaml-input']
        create_sample_data(DB, yaml_input)
    elif args.action == 'client-create':
        create_client_action(
            DB, username=args.username, client=args.client,
            urls=args.urls, auto_approve=(not args.external)
        )
    elif args.action == 'client-delete':
        delete_client_action(DB, args.client)
    elif args.action == 'user-delete':
        delete_users(DB, args.users)
    elif args.action == 'sync':
        sync_users(dbGaP, STORAGE_CREDENTIALS, DB,
                   projects=args.project_mapping, is_sync_from_dbgap_server=str2bool(args.sync_from_dbgap),
                   sync_from_local_csv_dir=args.csv_dir, sync_from_local_yaml_file=args.yaml)
    elif args.action == 'google-manage-keys':
        remove_expired_google_service_account_keys(DB)
    elif args.action == 'google-init':
        google_init(DB)
    elif args.action == 'google-manage-account-access':
        remove_expired_google_accounts_from_proxy_groups(DB)
    elif args.action == 'token-create':
        token = create_user_token(
            DB, BASE_URL, ROOT_DIR, args.__dict__['kid'],
            args.__dict__['type'], args.__dict__['username'],
            args.__dict__['scopes'], args.__dict__['exp'])
        if token:
            print(token)


def grant_project_to_group_or_user(s, project_data, group=None, user=None):
    privilege = project_data['privilege']
    project = create_project(s, project_data)
    if group:
        ap = s.query(AccessPrivilege).join(AccessPrivilege.project)\
            .join(AccessPrivilege.group)\
            .filter(Project.name == project.name, Group.name == group.name).first()
        name = group.name
    elif user:
        ap = s.query(AccessPrivilege).join(AccessPrivilege.project)\
            .join(AccessPrivilege.user)\
            .filter(Project.name == project.name, User.username == user.username).first()
        name = user.username
    else:
        raise Exception("need to provide either a user or group")
    if not ap:
        if group:
            ap = AccessPrivilege(project=project, group=group, privilege=privilege)
        elif user:
            ap = AccessPrivilege(project=project, user=user, privilege=privilege)
        else:
            raise Exception("need to provide either a user or group")
        s.add(ap)
        print ('created access privilege {} of project {} to {}'
               .format(privilege, project.name, name))

def create_users_with_group(s, data):
    providers = {}
    data_groups = data['groups']
    for username, data in data['users'].iteritems():
        is_existing_user = True
        user = s.query(User).filter(User.username == username).first()
        admin = data.get('admin', False)

        if not user:
            is_existing_user = False
            provider_name = data.get('provider', 'google')
            provider = providers.get(provider_name)
            if not provider:
                provider = s.query(IdentityProvider).filter(
                    IdentityProvider.name == provider_name).first()
                providers[provider_name] = provider
                if not provider:
                    raise Exception(
                        "provider {} not found".format(provider_name))

            user = User(
                username=username, idp_id=provider.id, is_admin=admin)
        user.is_admin = admin
        group_names = data.get('groups', [])
        for group_name in group_names:
            assign_group_to_user(s, user, group_name, data_groups[group_name])
        projects = data.get('projects', [])
        for project in projects:
            grant_project_to_group_or_user(s, project, user=user)
        if not is_existing_user:
            s.add(user)
        for client in data.get('clients', []):
            create_client_action(DB, username=username, **client)


def assign_group_to_user(s, user, group_name, group_data):
    group = s.query(Group).filter(Group.name == group_name).first()
    if not group:
        group = Group(name=group_name)
        s.add(group)
        user.groups.append(group)
    if group not in user.groups:
        user.groups.append(group)


if __name__ == '__main__':

    parser = argparse.ArgumentParser()

    parser.add_argument(
        '--path',
        default='/var/www/fence/',
        help='path to find local_settings.py',
    )
    subparsers = parser.add_subparsers(title='action', dest='action')
    create = subparsers.add_parser('create')
    c_create = subparsers.add_parser('client-create')
    c_delete = subparsers.add_parser('client-delete')
    hmac_create = subparsers.add_parser('hmac-create')
    hmac_create.add_argument('yaml-input')
    create.add_argument('yaml-input')
    c_create.add_argument('--client', required=True)
    c_create.add_argument('--urls', required=True)
    c_create.add_argument('--username', required=True)
    c_delete.add_argument('--client', required=True)
    main()
