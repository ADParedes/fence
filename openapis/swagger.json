{
  "swagger" : "2.0",
  "info" : {
    "description" : "Access management for CDIS data commons. Code is available on [GitHub](https://github.com/uc-cdis/fence).",
    "version" : "0.1.0",
    "title" : "Fence OpenAPI Specification",
    "termsOfService" : "http://cdis.uchicago.edu/terms/",
    "contact" : {
      "email" : "cdis@uchicago.edu"
    },
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host" : "example.domain",
  "basePath" : "/",
  "tags" : [ {
    "name" : "oauth2",
    "description" : "Authorization and token management"
  }, {
    "name" : "user",
    "description" : "User information"
  }, {
    "name" : "data",
    "description" : "Generate pre-signed URLs"
  }, {
    "name" : "link",
    "description" : "Link access identities"
  }, {
    "name" : "keys",
    "description" : "Get public keys used to validate JWTs issued by fence"
  } ],
  "schemes" : [ "https" ],
  "paths" : {
    "/oauth2/authorize" : {
      "get" : {
        "tags" : [ "oauth2" ],
        "summary" : "Perform OAuth2 authorization",
        "description" : "Obtain an authorization grant through the OAuth2 protocol. To handle this request, render a page for the user to confirm the OAuth2 grant (through e.g. Google). Redirect user to `redirect_uri` with an added `code` parameter obtained from the authorization provider.",
        "operationId" : "authorize",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "client_id",
          "in" : "query",
          "description" : "The client's ID, issued by authorization server",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "response_type",
          "in" : "query",
          "description" : "For an authorization request using the access code flow, the response type must be \"code\". If this is missing from the request then the authorization server must return an error.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "redirect_uri",
          "in" : "query",
          "description" : "Page to redirect to after access has been granted",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "scope",
          "in" : "query",
          "description" : "Requested authorization scope",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation"
          }
        }
      },
      "post" : {
        "tags" : [ "oauth2" ],
        "summary" : "Perform OAuth2 authorization",
        "description" : "Obtain an authorization grant through the OAuth2 protocol. To handle this request, render a page for the user to confirm the OAuth2 grant (through e.g. Google). Redirect user to `redirect_uri` with an added `code` parameter obtained from the authorization provider. A POST will not render a page for the user; this implementation checks the `confirm` value in the request.",
        "operationId" : "authorize_post",
        "consumes" : [ "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "client_id",
          "in" : "formData",
          "description" : "The client's ID, issued by authorization server",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "response_type",
          "in" : "formData",
          "description" : "For an authorization request using the access code flow, the response type must be \"code\". If this is missing from the request then the authorization server must return an error.",
          "required" : true,
          "type" : "string",
          "enum" : [ "code", "token" ]
        }, {
          "name" : "redirect_uri",
          "in" : "formData",
          "description" : "Page to redirect to after access has been granted",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "confirm",
          "in" : "formData",
          "description" : "whether to confirm the OAuth2 grant (should be 'yes')",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "scope",
          "in" : "formData",
          "description" : "Requested authorization scope",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/oauth2/token" : {
      "post" : {
        "tags" : [ "oauth2" ],
        "summary" : "Exchange code for or refresh the access token.",
        "description" : "Exchange the `code` obtained from OAuth2 for an access token, or refresh the access token using a refresh token.",
        "operationId" : "token",
        "consumes" : [ "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "grant_type",
          "in" : "formData",
          "description" : "Value MUST be `\"authorization_code\"` (which is the authorization flow used in this implementation)",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "code",
          "in" : "formData",
          "description" : "The authorization code returned from the OAuth2 authorization request",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "redirect_uri",
          "in" : "formData",
          "description" : "Must be identical to the `\"redirect_uri\"` included in the original authorization request",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "client_id",
          "in" : "formData",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/oauth2/revoke" : {
      "post" : {
        "tags" : [ "oauth2" ],
        "summary" : "Revoke a token",
        "description" : "Revoke the access or refresh token granted to a user.",
        "operationId" : "revoke",
        "consumes" : [ "application/x-www-form-urlencoded" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "formData",
          "description" : "Token that the user wants to revoke",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation, OR invalid token submitted"
          },
          "400" : {
            "description" : "invalid token provided: not a refresh token, or token was missing a claim, or token could not be validated"
          }
        }
      }
    },
    "/keys" : {
      "get" : {
        "tags" : [ "keys" ],
        "summary" : "Return the public keys which can be used to validate JWTs issued and signed by fence",
        "operationId" : "getKeys",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PublicKeys"
            }
          }
        }
      }
    },
    "/user" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Return info about the current user",
        "operationId" : "getUserInfo",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/UserInfo"
            }
          }
        },
        "security" : [ {
          "OAuth2" : [ "user" ]
        } ]
      }
    },
    "/data/{uuid}" : {
      "get" : {
        "tags" : [ "data" ],
        "summary" : "Create a presigned URL for data",
        "description" : "Allow users to get a pre-signed URL given the location of preference.",
        "operationId" : "getPresignedURL",
        "parameters" : [ {
          "name" : "uuid",
          "in" : "path",
          "description" : "data UUID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "location",
          "in" : "query",
          "description" : "location (as in cloud provider) to use",
          "required" : true,
          "type" : "string",
          "enum" : [ "aws", "google" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PresignedURL"
            }
          },
          "400" : {
            "description" : "Invalid input: UUID not found or invalid location"
          }
        },
        "security" : [ {
          "OAuth2" : [ "user" ]
        } ]
      }
    },
    "/link/google/" : {
      "post" : {
        "tags" : [ "link" ],
        "summary" : "Link Google identity",
        "description" : "Allow users to use standard data access tools provided by Google after linking users’ Google identity. User’s identity will be added to a proxy group owned by GDC, the proxy group will then be added to project specific groups and the Google groups will be added to buckets ACLs.",
        "operationId" : "linkCloudIdentity",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation"
          }
        }
      }
    }
  },
  "securityDefinitions" : {
    "OAuth2" : {
      "type" : "oauth2",
      "authorizationUrl" : "/oauth/authorize",
      "tokenUrl" : "/oauth/token",
      "flow" : "accessCode",
      "scopes" : {
        "user" : "generic user access"
      }
    }
  },
  "definitions" : {
    "UserInfo" : {
      "type" : "object",
      "required" : [ "certificates_uploaded", "email", "message", "pdc_id", "project_access", "resources_granted", "username" ],
      "properties" : {
        "pdc_id" : {
          "type" : "string"
        },
        "username" : {
          "type" : "string",
          "description" : ""
        },
        "resources_granted" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "project_access" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "certificates_uploaded" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "email" : {
          "type" : "string",
          "description" : ""
        },
        "message" : {
          "type" : "string"
        }
      }
    },
    "PresignedURL" : {
      "type" : "object",
      "properties" : {
        "url" : {
          "type" : "string",
          "description" : "the presigned url issued to"
        }
      }
    },
    "PublicKeys" : {
      "type" : "object",
      "properties" : {
        "keys" : {
          "type" : "array",
          "description" : "array of single-entry dictionaries mapping from key id to public key",
          "items" : {
            "type" : "object",
            "description" : "single-entry mapping `key_id: public_key`",
            "properties" : { }
          }
        }
      },
      "example" : {
        "keys" : [ {
          "public_key_01" : "-----BEGIN PUBLIC KEY----- ... -----END PUBLIC KEY-----"
        } ]
      }
    },
    "OAuthHTML" : {
      "type" : "string"
    }
  }
}